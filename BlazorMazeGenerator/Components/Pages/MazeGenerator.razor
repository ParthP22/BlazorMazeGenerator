@page "/mazegenerator"
@rendermode InteractiveServer

@* @inject MazeGenerator MST*@

@using BlazorMazeGenerator.MazeGen

<h3>Maze Generator</h3>

<p>
    <button @onclick="GenerateMaze">Generate Maze</button>
</p>

@if (mst != null)
{
    <svg width="@(GridWidth * UnitSize + (2 * MazeOffset))" height="@(GridHeight * UnitSize + (2 * @MazeOffset))" style="border:0px solid black; ">
        @*Left Border*@
        <line x1="@MazeOffset" y1="0" x2="@MazeOffset" y2="@(GridHeight * UnitSize + MazeOffset)" stroke="black" stroke-width="2" />
        
        @*Top Border*@
        <line x1="@(MazeOffset + UnitSize)" y1="@MazeOffset" x2="@(GridWidth * UnitSize + MazeOffset)" y2="@MazeOffset" stroke="black" stroke-width="2" />

        @*Small Line Pointing Up Along the Top Border*@
        <line x1="@(MazeOffset + UnitSize)" y1="@MazeOffset" x2="@(MazeOffset + UnitSize)" y2="0" stroke="black" stroke-width="2" />

        
        @*Right Border*@
        <line x1="@(GridWidth * UnitSize + MazeOffset)" y1="@MazeOffset" x2="@(GridWidth * UnitSize + MazeOffset)" y2="@(GridHeight * UnitSize + (2 * MazeOffset))" stroke="black" stroke-width="2" />
        
        @*Bottom Border*@
        <line x1="@MazeOffset" y1="@(GridHeight * UnitSize + MazeOffset)" x2="@(GridWidth * UnitSize + MazeOffset - UnitSize)" y2="@(GridHeight * UnitSize + MazeOffset)" stroke="black" stroke-width="2" />

        @*Small Line Pointing Down Along the Bottom Border*@
        <line x1="@(GridWidth * UnitSize + MazeOffset - UnitSize)" y1="@(GridHeight * UnitSize + MazeOffset)" x2="@(GridWidth * UnitSize + MazeOffset - UnitSize)" y2="@(GridHeight * UnitSize + (2 *MazeOffset))" stroke="black" stroke-width="2" />
        
        @for(int i = 0; i < walls.Count; i++)
        { 
            @if (walls[i][2] == 0) // Vertical edge
            {
             
                if (walls[i][4] == 1)
                {
                    var x1 = ((walls[i][0] % @GridWidth) + 1) * @UnitSize + @MazeOffset;
                    var y1 = ((walls[i][0] / @GridHeight) + 1) * @UnitSize - @UnitSize + @MazeOffset;
                    var x2 = ((walls[i][0] % @GridWidth) + 1) * @UnitSize + @MazeOffset;
                    var y2 = ((walls[i][0] / @GridHeight) + 1) * @UnitSize + @MazeOffset;
                    <line x1=@x1 y1=@y1 x2=@x2 y2=@y2 stroke="black" stroke-width="2" />
                }

            }
            else if (walls[i][2] == 1) // Horizontal edge
            {
                
                if (walls[i][4] == 1)
                {
                    var x1 = ((walls[i][0] % @GridWidth) + 1) * @UnitSize - @UnitSize + @MazeOffset;
                    var y1 = ((walls[i][0] / @GridHeight) + 1) * @UnitSize + @MazeOffset;
                    var x2 = ((walls[i][0] % @GridWidth) + 1) * @UnitSize + @MazeOffset;
                    var y2 = ((walls[i][0] / @GridHeight) + 1) * @UnitSize + @MazeOffset;
                    <line x1=@x1 y1=@y1 x2=@x2 y2=@y2 stroke="black" stroke-width="2" />
                }
                

            }
        }        
    }
    </svg>
}
else
{
    <p>No maze generated yet.</p>
}


@code {

    private List<int[]>? mst;
    private List<int[]>? walls;
    private int[,]? edges;
    private int[,]? grid;
    private int WindowHeight = 500;
    private int WindowWidth = 500;
    private int UnitSize = 25;
    private int? MazeOffset;
    private int GridHeight => WindowHeight / UnitSize;
    private int GridWidth => WindowWidth / UnitSize;



    private int GetX(int node) => ((node % GridWidth) ) * UnitSize;
    private int GetY(int node) => ((node % GridHeight) ) * UnitSize;

    private void GenerateMaze()
    {
        MazeOffset = UnitSize;

        Console.WriteLine("Generating Maze...");
        var generator = new MazeGen.MazeGenerator(WindowHeight, WindowWidth, UnitSize);
        mst = generator.Kruskals();
        // foreach (int[] edge in mst)
        // {
        //     Console.WriteLine(edge[0] + ", " + edge[1]);
        // }

        walls = generator.WallEdges;
        grid = generator.grid;

        edges = generator.edges;

        Console.WriteLine("First wall: " + walls[0][0] + ", " + walls[0][1]);
        Console.WriteLine("x1: " + GetX(walls[0][0]) + ", y1: " + GetY(walls[0][0]) + ", x2: " + GetX(walls[0][0]) + ", y2: " + GetY(walls[0][0]) );


        // Force UI to refresh (optional)
        StateHasChanged();
    }

}

 
